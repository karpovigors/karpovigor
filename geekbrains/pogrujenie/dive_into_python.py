def dive_into_python(lesson):
    match lesson:
        case 1:
            # Урок 1

            print("Задание 1.")
            # Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей. 
            # Дано a, b, c - стороны предполагаемого треугольника. 
            # Требуется сравнить длину каждого отрезка-стороны с суммой двух других. 
            # Если хотя бы в одном случае отрезок окажется больше суммы двух других,
            # то треугольника с такими сторонами не существует.
            # Отдельно сообщить является ли треугольник разносторонним, равнобедренным или равносторонним.

            def check_triangle(side_a, side_b, side_c):
                if side_a + side_b > side_c and side_a + side_c > side_b and side_b + side_c > side_a:
                    if side_a == side_b == side_c:
                        return "Равносторонней треугольник"
                    elif side_a == side_b or side_b == side_c or side_c == side_a:
                        return "Равнобедренный треугольник"
                    else:
                        return "Разносторонний треугольник"
                else:
                    return "Треугольник не существует"

            a = float(input("Введите длину сторона треугольника a: \n"))
            b = float(input("Введите длину сторона треугольника b: \n"))
            c = float(input("Введите длину сторона треугольника c: \n"))

            result_1_1 = check_triangle(a, b, c)
            print(result_1_1)

            print("Задание 2.")
            # Напишите код, который запрашивает число и сообщает - является ли оно простым или составным.
            # Используйте правило для проверки:
            # "Число является простым, если делится нацело только на единицу и на себя."
            # Сделайте ограничение на ввод отрицательных чисел и чисел больше 100 тысяч.

            def composite_or_prime(num):
                if num < 0:
                    return "Ошибка, вы ввели отрицательное число."
                if num > 100_000:
                    return "Ошибка, вы ввели число больше 100 000."
                if num < 2:
                    return "Число не является ни простым, ни составным."
                for i in range(2, int(num ** 0.5) + 1):
                    if num % i == 0:
                        return "Число является составным."
                return "Число является простым."

            num_1_2 = int(input("Введите число: \n"))

            result_1_2 = composite_or_prime(num_1_2)
            print(result_1_2)

        case 2:
            # Урок 2

            print("Задание 1.")
            # Напишите программу, которая получает целое число
            # и возвращает его шестнадцатеричное строковое представление.
            # Функцию hex используйте для проверки своего результата.

            print("Задание 2.")
            # Напишите программу, которая принимает две строки вида “a/b” - дробь с числителем и знаменателем. 
            # Программа должна возвращать сумму и произведение* дробей.
            # Для проверки своего кода используйте модуль fractions.

        case 3:

            print("Задание 1.")
            # Дан список повторяющихся элементов. 
            # Вернуть список с дублирующимися элементами. 
            # В результирующем списке не должно быть дубликатов.

            print("Задание 2.")
            # В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
            # Не учитывать знаки препинания и регистр символов.
            # За основу возьмите любую статью из википедии или из документации к языку.

            print("Задание 3.")
            # Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
            # Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность. 
            # Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.


def main():
    number_lesson = int(input("Введите номер урока:"))
    dive_into_python(number_lesson)


main()
